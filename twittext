#!/usr/bin/env python
#-*- coding: utf-8 -*-

##################################################
# Twittext
# - http://www.techno-st.net/wiki/Twittext
##################################################

import twitter
import curses
import curses.wrapper
import curses.textpad
import locale
import signal
import urllib2
import string

# config file
from config import *

cachetime = 30

def start(stdcur):
    stdcur.timeout(DELAY)
    curses.use_default_colors()
    force_reload = False

    while True:
        (Y, X) = stdcur.getmaxyx()

        curses.noecho()
        curses.curs_set(0)
        stdcur.addstr(0, 0, "Reloading Timeline...")
        stdcur.refresh()
        
        try:
            tl = api.GetFriendsTimeline(count = (Y - 2))
        except TypeError:
            tl = api.GetFriendsTimeline()
        except urllib2.HTTPError, e:
            if e.code == 401:
                curses.endwin()
                print "Error: Authentication Failed"
                exit()
            elif e.code / 100 == 5:
                stdcur.addstr(1, 0, "[Twitter Error (%d)]" % e.code)
                continue
            else:
                curses.endwin()
                print "Error: %s", e
                exit()
        except urllib2.URLError:
            curses.endwin()
            print "Error: Can't connect twitter."
            exit()
        
        if force_reload:
            api.SetCacheTimeout(cachetime)
            force_reload = False

        tl_list = show_timeline(tl, stdcur, Y, X)
        
        c = stdcur.getch(0, 7)
        
        if c == curses.KEY_DOWN:
            stdcur.addstr(0, 7, " " * (X - 8))
            stdcur.move(2, 0)

            while True:
                (ny, nx) = stdcur.getyx()
                selstr = stdcur.instr(ny, 0)
                stdcur.addstr(ny, 0, selstr, curses.A_STANDOUT)
                c = stdcur.getch()

                if c == curses.KEY_DOWN:
                    if ny < Y - 1: v = 1
                    else: v = 0
                elif c == curses.KEY_UP:
                    if ny > 2: v = -1
                    else: v = 0
                elif c == 0x0a or c == curses.KEY_ENTER: # Enter
                    # Reply
                    curses.echo()
                    stdcur.addstr(0, 0, "Reply: ")
                    
                    target = tl_list[ny - 2]
                    reply_to = target.id

                    postmsg = "@%s " % target.user.screen_name
                    curses.curs_set(1)
                    stdcur.addstr(0, 7, postmsg)
                    tmpstr = stdcur.getstr(
                        0, 7 + len(postmsg)).decode('utf-8')

                    if not tmpstr == "":
                        postmsg += tmpstr
                    else:
                        postmsg = ""

                    break # this is ok
                elif c == 0x72: # r
                    # ReTweet
                    curses.echo()
                    stdcur.addstr(0, 0, "ReTweet: ")
                    
                    target = tl_list[ny - 2]
                    reply_to = target.id

                    curses.curs_set(1)
                    tmpstr = stdcur.getstr(0, 9).decode('utf-8')

                    if tmpstr == "":
                        postmsg = "RT @%s: %s" % (target.user.screen_name, target.text)
                    else:
                        postmsg = "%s RT @%s: %s" % (tmpstr, target.user.screen_name, target.text)

                    stdcur.move(0, 0)
                    stdcur.clrtoeol()
                    stdcur.addstr(0, 0, "OK? (Y/n): ")
                    if stdcur.getch(0, 11) == 0x6e: # n
                        postmsg = ""

                    break # this is ok
                elif c == 0x1b: # Esc
                    postmsg = None
                    break
                else:
                    continue
                
                selstr = stdcur.instr(ny, 0)
                stdcur.addstr(ny, 0, selstr, curses.A_NORMAL)
                stdcur.move(ny + v, 0)
        elif c == 0x0a or c == curses.KEY_ENTER: # Enter
            curses.echo()
            curses.curs_set(1)
            stdcur.addstr(" " * (X - 8))
            postmsg = stdcur.getstr(0, 7).decode('utf-8')
        elif c == 0x72: # r
            api.SetCacheTimeout(0)
            force_reload = True
            postmsg = None
        elif c == 0x71: # q
            exit()
        elif c == -1:
            postmsg = None
        else:
            postmsg = None
            continue
        
        stdcur.clear()
        curses.noecho()

        stdcur.addstr(0, 0, "Posting Status...")
        stdcur.refresh()
        
        if not postmsg == None and not postmsg == "":
            try:
                if postmsg[0] == '@':
                    ret = api.PostUpdate(postmsg[:140], reply_to)
                else:
                    ret = api.PostUpdate((postmsg + FOOTER)[:140])
            except urllib2.HTTPError, e:
                if e.code / 100 == 5:
                    stdcur.addstr(1, 0, 
                                  "[Error]: Twitter over capacity. (please any key)")
                    stdcur.refresh()
                    stdcur.getch()

        stdcur.clear()

def show_timeline(tl, stdcur, Y, X):    
    stdcur.addstr(0, 0, "wayd?: ")
    stdcur.addstr(" " * (X - 8), curses.A_STANDOUT)
    
    header = " (@%s) [Twittext] =" % USER
    stdcur.addstr(
        1, 0,
        "=" * (X - len(header)) + header)
    
    ret = []
    i = 2
    for s in tl:
        stdcur.addstr(
            i, 0, "[%7s] " % (
                s.user.screen_name[0:7]))
        
        sss = split_text(s.text, X - 10)

        for ss in sss:
            try:
                stdcur.addstr(i, 10, ss.encode("utf-8"))
                ret.append(s)
            except:
                # debug
                curses.endwin()
                print "Please report (addstr bug): "
                print "[1234567] %s" % ss
                exit()

            i += 1
            if i >= Y:
                break
        
        if i >= Y:
            break
    
    stdcur.refresh()

    return ret

def split_text(s, w):
    i = 0
    ss = ""
    sss = []
    
    for c in s:
        if c == "\n":
            continue
        
        if 0x00 <= ord(c) <= 0x7f:
            i += 1
        else:
            i += 2

        ss += c
        
        if i >= w - 1:
            if len(sss) == 0:
                sss = [ss]
            else:
                sss.append(ss)
            
            ss = ""
            i = 0
    
    if not ss == "":
        sss.append(ss)

    return sss

def quit_me(signum = None, frame = None):
    exit()

signal.signal(signal.SIGINT, quit_me)
locale.setlocale(locale.LC_ALL, "")
api = twitter.Api(username = USER, password = PASS)

if(float(twitter.__version__[:3]) >= 0.6):
    api.SetCacheTimeout(cachetime)
    #api.SetSource("Twitext")

curses.wrapper(start)
